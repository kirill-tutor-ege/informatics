# 1. Посчитать кол-во
# 2. Найти макс/мин
# *. условие

# Считать условие
numbers = [int(x) for x in open("17.txt")]

# Пара чисел (рядом)
for i in range(len(numbers) - 1):
    a, b = numbers[i], numbers[i + 1] # a, b - элементы пары

# Пара чисел (любые)
for i in range(len(numbers) - 1):
    for j in range(i + 1, len(numbers)):
        a, b = numbers[i], numbers[j] # a, b - элементы пары

# Тройка чисел (рядом)
for i in range(len(numbers) - 2):
    a, b, c = numbers[i], numbers[i + 1], numbers[i + 2] # a, b, c - элементы тройки

# Тройка чисел (любые)
for i in range(len(numbers) - 1):
    for j in range(i + 1, len(numbers)):
        for k in range(j + 1, len(numbers)):
            a, b, c = numbers[i], numbers[j], numbers[k] # a, b, c - элементы тройки

# Проверить разрядность(длина числа)
# Пример, проверить чтобы было 4-х значным
len(str(abs(x))) == 4
-10000 < x < -999 or 999 < x < 10000

# Кратность n
x % n == 0

# ТОЛЬКО ОДИН
# 1. Два условия
(условие) != (условие)
# Пример, только одно число кратно 2-м
(a % 2 == 0) != (b % 2 == 0)

# a b F
# ч ч True != True => False
# ч н True != False => True
# н ч False != True => True
# н н False != False => False

# 2. Когда условий больше
# 2.1 в лоб
# Пример, только одно число из трёх кратно 2-м
((a % 2 == 0) and (b % 2 != 0) and (c % 2 != 0)) or \
((a % 2 != 0) and (b % 2 == 0) and (c % 2 != 0)) or \
((a % 2 != 0) and (b % 2 != 0) and (c % 2 == 0))

# 2.2 генератор
# Только один
[условие for x in [a, b, c]].count(True) == 1
# Ровно n раз
[условие for x in [a, b, c]].count(True) == n

# Пример, только одно число из трёх кратно 2-м
[x % 2 == 0 for x in [a, b, c]].count(True) == 1
# Пример, ровно 2 числа из трех кратно 2-м
[x % 2 == 0 for x in [a, b, c]].count(True) == 2

# 2.3 сложение
# Пример, только одно число из трёх кратно 2-м
((a % 2 == 0) + (b % 2 == 0) + (c % 2 == 0)) == 1
# Пример, ровно 2 числа из трех кратно 2-м
((a % 2 == 0) + (b % 2 == 0) + (c % 2 == 0)) == 2

# Пример с пояснением
# ((a % 2 == 0) + (b % 2 == 0) + (c % 2 == 0)) == 1
# a = 4; b = 5; c = 3

# ((a % 2 == 0) + (b % 2 == 0) + (c % 2 == 0)) == 1
# ((4 % 2 == 0) + (5 % 2 == 0) + (3 % 2 == 0)) == 1
# ((0 == 0) + (1 == 0) + (1 == 0)) == 1
# (True + False + False) == 1
# (1 + 0 + 0) == 1
# 1 == 1
# True


# Проверить, чтобы число оканчивалось на что-то
str(x)[-n:] == "???"
# Пример, проверить, чтобы число оканчивалось на 43
str(x)[-2:] == "43" # в скобках -2, потому что нас интересуют последние 2 символа

# ВНИМАТЕЛЬНО ЧИТАЕМ УСЛОВИЕ, ОЧЕНЬ ВНИМАТЕЛЬНО!!!

# Пример: две разные формулировки, которые выглядят почти одинаково, но если не так понять, будет печаль
# 1 вариант: определите количество пар, сумма элементов которых, больше максимального квадрата элемента, оканчивающегося на 3
#   Надо, чтобы именно КВАДРАТ элемента оканчивался на 3
# 2 вариант: определите количество пар, сумма элементов которых, больше квадрата максимального элемента, оканчивающегося на 3
#   Сначала максимальный, оканчивающийся на 3, и только ПОТОМ возводим в квадрат
